하나의 서버에 복수의 웹 어플리케이션을 기동하는 경우에
발생할 수 있는 url 충돌 

첫번째 웹 어플리케이션 : 수업 시간에 진행하는 jsp 프로젝트, 컨텍스트 패스 : / 
	jsp 는 폴더 
	webapp/jsp/basic.jsp
	==> localhost/jsp/basic.jsp
두번째 웹 어플리케이션 : 신규 프로젝트 생성, 컨텍스트 패스 : /jsp 
	컨텍스트 패스를 /jsp 로 설정해놓음 (jsp 는 컨텍스트 패스 ) 
	webapp/basic.jsp
	==> localhost/jsp/basic.jsp
	
	
	contextPath 가 경로보다 우선되서 나온다. 
	즉 contextPath 를 /jsp 로 설정, 경로가 jsp 폴더 아래에 있을 때 
	두개를 비교했을때 contextPath 가 /jsp 라고 설정된 아이가 우선된다. 
	
	컨텍스트페스로 구분하지 않는 경우가 많다. 

기본 객체와 영역
	-기본객체의 종류 및 특성
	**영역(Scope)의 종류 및 특성 
	-기본 객체중에서도 scope 를 갖는 녀석은 중요함 
=========> contextPath 가 먼저 적용되어 두번쨰 웹 어플리케이션에서 응답을 생성한 것을 확인 
클라이언트 입장에서는 url 만 보고서 contextPath 인지 일반 폴더를 가리키는 경로인지를 판단할 수는 없다. 
jsp 기본 객체
스크립틀릿에서 별도로 선언 없이 사용할 수 있는, 미리 선언되어 있는 객체 
jsp 파일이 servlet으로 변환되는 과정(서버가 변환) 에서 선언되어있는 것을 확인할 수 있다. 
(work 폴더에서 확인)

pageContext : 암묵적으로 의도하지 않게 사용된다.  
			  4개의 scope 에 접근할 수 있는 객체  
			  jsp 에 선언된 다른 내장객체를 관리	
			  getAttribute, setAttribute, findAttribute()	(pageContext => request => session => application
			  
			  jsp 에 선언된 다른 내장 객체를 관리
			  getPage(), getRequest(), getSession(), getServletContext() 
			  
(type : Pagecontext ) 			  

request : (scope) 소멸 시점 : 응답이 생성된 이후 
(type : HttpServletRequest )


session : 	서버의 사용자별로 할당되는 공간 , 사용자를 식별하기 위해 사용(cookie-session) 
			(scope) 특정시간이 지난후 ( 서버에 설정된 시간만큼 서버로 요청을 안보내면 소멸 ) 
-> 특정시간 외에 소멸시점을 (로그아웃을통해) 강제로 설정 가능
			or 강제로 삭제 가능(session.invalidate() 이나 ,  
( Type : HttpSession ) 
application : 서버 메모리에 할당되는 공간, 서버에 하나만 존재하는 공간  
			  web.xml에 설정한 초기화 파라미터 정보를 얻어올 수 있음 
(Type : ServletContext 타입이다. )  
							  
======================================================================

page : jsp 페이지 객체(인스턴스)를 의미  
	   jspService()
config : 서블릿 컨테이너가 서블릿 초기화시 사용하는 설정을 저장한 객체 
		 servlet 의 init 메소드의 인자로 전달된다.


				
				
				참고
				 public void init(ServletConfig config) throws ServletException {
	this.config = config;
	this.init();
    }


    /**
     * A convenience method which can be overridden so that there's no need
     * to call <code>super.init(config)</code>.
     *
     * <p>Instead of overriding {@link #init(ServletConfig)}, simply override
     * this method and it will be called by
     * <code>GenericServlet.init(ServletConfig config)</code>.
     * The <code>ServletConfig</code> object can still be retrieved via {@link
     * #getServletConfig}. 
     *
     * @exception ServletException 	if an exception occurs that
     *					interrupts the servlet's
     *					normal operation
     */
    public void init() throws ServletException {

    }
    
    
    객체지향적으로 짬 -> 코드중복이 없다. 한부분을 수정하면 그거와 관련된 녀석이 영향을 받아야한다.
	일을 두번하지 않고(오버라이드를 두번하지않고) 인자가 있는 녀석이 -> 인자가 없는 녀석에 콜. 
	(인자가 없는 녀석을 바꾸면 -> 인자가 있던 없던 적용을 한다. )
	
	
	out : 응답생성을 위한 출력 객체 
	servlet.getWriter()  ==> PrintWriter type 객체 반환, PrintWriter 객체와 유사
	
	jsp 에서 문자열을 생성하기 위해 표현식을 사용
	자바의 반복문을 사용하며 표현식을 사용하기 위해서는 다음과 같은 형태로 코드를 작성함
	
	<% for(int i = 0 ; i < 10; i++ ) { %> 
		<%=i %>
	<% } %>
	
	스크립틀릿과 표현식의 구문 표기 <% . <%= f를 열고 닫는 부분으로 코드 가독성이 떨어짐
	out 객체를 이용하면 표현식을 사용하지 않고도 문자를 출력할 수 있음 
	
	<% for(int i = 0 ; i < 10; i++ ) { %> 
		out.write(i);
	<% } %>	
	
	
	
	
	
	
	
	page : header 
	다른 jsp를 include 하나의 웹페이지이지만 여러개의 jsp 가 들어있을 수 있고. scope를
	 include 로 가져와서 사용할 수 있다. 
	 
	 page라는 개념 알아보기 : 
	